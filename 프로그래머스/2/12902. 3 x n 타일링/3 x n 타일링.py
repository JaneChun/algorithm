# n = 0 -> 1

# n = 2 -> 1 * 3 = 3 (n = 2일 때 가능한 기본 조합 3가지)

# n = 4 -> 3 * 3 = 9 (dp[2] * 기본 조합 3가지)
#                + 2  (3×4 전체를 채우는 특이 조합 2가지 발생 => dp[0] * 2)
#                = 11

# n = 6 -> 11 * 3 = 33 (dp[4] * 3)
#                 + 6 (3*2 공간 + 3*4 특이 조합 => dp[2] * 2)
#                 + 2 (3*6 전체를 채우는 특이 조합 2가지 => dp[0] * 2)


def solution(n):
    if n % 2 == 1:
        return 0
    
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[2] = 3
    
    for i in range(4, n + 1, 2): 
        dp[i] = dp[i - 2] * 3 + sum([dp[j] * 2 for j in range(i - 4, -1, -2)])
        #                     + dp[i - 4] * 2 + dp[i - 6] * 2 + ...
        dp[i] %= 1000000007
        
    return dp[n]